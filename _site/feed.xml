<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://www.danieljbradshaw.co.uk/feed.xml" rel="self" type="application/atom+xml" /><link href="http://www.danieljbradshaw.co.uk/" rel="alternate" type="text/html" /><updated>2017-10-15T20:53:55+01:00</updated><id>http://www.danieljbradshaw.co.uk/</id><title type="html">Dan Bradshaw</title><subtitle>Games Programmer.</subtitle><entry><title type="html">Redesigned Blog</title><link href="http://www.danieljbradshaw.co.uk/blog/Redesigned-Blog/" rel="alternate" type="text/html" title="Redesigned Blog" /><published>2017-10-15T00:00:00+01:00</published><updated>2017-10-15T00:00:00+01:00</updated><id>http://www.danieljbradshaw.co.uk/blog/Redesigned-Blog</id><content type="html" xml:base="http://www.danieljbradshaw.co.uk/blog/Redesigned-Blog/">&lt;p&gt;So I’ve left my website untouched for quite some time. These last few years have been busy!
Hopefully I’ll get round to posting more regular entries, and keeping track the things I come across daily.
I’ve already got one post in progress, so that’s a start!&lt;/p&gt;

&lt;p&gt;That’s all for now, see you in the next one!&lt;/p&gt;</content><author><name>Dan Bradshaw</name><email>danieljbradshaw@gmail.com</email></author><category term="Misc" /><summary type="html">Finally got round to updating this!</summary></entry><entry><title type="html">Final Year Project - Music Visualisation Demo</title><link href="http://www.danieljbradshaw.co.uk/blog/Starting-Final-Year-Project/" rel="alternate" type="text/html" title="Final Year Project - Music Visualisation Demo" /><published>2012-12-01T00:00:00+00:00</published><updated>2012-12-01T00:00:00+00:00</updated><id>http://www.danieljbradshaw.co.uk/blog/Starting-Final-Year-Project</id><content type="html" xml:base="http://www.danieljbradshaw.co.uk/blog/Starting-Final-Year-Project/">&lt;h1 id=&quot;coming-up-with-the-idea&quot;&gt;Coming up with the idea&lt;/h1&gt;

&lt;p&gt;I had a number of ideas I wanted to work on for my final year project, but over my second year I had a growing interest of using the GPU to offload computation from the CPU.&lt;/p&gt;

&lt;p&gt;Now that I’m in my final year at University, I have to select which a final year project to work on. Over the summer I had a number of ideas for this, but I’ve finally narrowed this down to working with GPU compute.&lt;/p&gt;

&lt;p&gt;Since the beginning of second year I had a great interest in using the GPU to offload computation from the CPU. This has many uses, but I decided to focus on particle simulation. The huge parallel processing power of GPUs is perfectly suited to running particle simulations, and allows for a huge increase in the number of particles we can simulate at once.&lt;/p&gt;

&lt;p&gt;By creating an API to easily offload this particle simulation for users, I hope to make integrating GPU based particle simulation into games and other applications easier and much more flexible.&lt;/p&gt;

&lt;h1 id=&quot;selecting-the-graphics-api-to-use&quot;&gt;Selecting the graphics API to use&lt;/h1&gt;

&lt;p&gt;One of the most important parts to get right for this project is selecting which API to use when interfacing with the GPU. There’s a number of options available as listed below:&lt;/p&gt;

&lt;h4 id=&quot;compute-shaders&quot;&gt;Compute Shaders&lt;/h4&gt;

&lt;p&gt;The newest versions of DirectX and OpenGL provide the user with the use of compute shaders. These more general purpose shaders allow the programmer to define more complex tasks to run on arbitrary data, rather than the traditional and rather limited vertex/geometry/pixel shader variants.&lt;/p&gt;

&lt;p&gt;Since this system will be targeting as many platforms as possible, OpenGL is the main option here as it supports all major platforms such as Windows, Mac and Linux.&lt;/p&gt;

&lt;h4 id=&quot;cuda&quot;&gt;CUDA&lt;/h4&gt;

&lt;p&gt;nVidia provides an amazing GPU compute platform called CUDA. The platform provides a great set of APIs and makes it very easy to get set up and running code on a GPU. Unfortunately, this is only available on nVidia GPUs at the moment, which rules out all users using AMD hardware.&lt;/p&gt;

&lt;h4 id=&quot;opencl&quot;&gt;OpenCL&lt;/h4&gt;

&lt;p&gt;OpenCL is an opensource cross plaform alternative to CUDA.&lt;/p&gt;

&lt;iframe src=&quot;https://www.youtube.com/embed/oXoq9hyEH8U?ecver=2&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; style=&quot;position:absolute;width:100%;height:100%;left:0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Dan Bradshaw</name><email>danieljbradshaw@gmail.com</email></author><category term="University" /><category term="Final Year Project" /><category term="C++" /><category term="GPU Particles" /><category term="OpenCL" /><summary type="html">Using an OpenCL powered particle system to simulate hundreds of thousands of particles!</summary></entry><entry><title type="html">Direct 3D - Soft Shadows</title><link href="http://www.danieljbradshaw.co.uk/blog/Direct3D-Soft-Shadows/" rel="alternate" type="text/html" title="Direct 3D - Soft Shadows" /><published>2012-03-13T00:00:00+00:00</published><updated>2012-03-13T00:00:00+00:00</updated><id>http://www.danieljbradshaw.co.uk/blog/Direct3D-Soft-Shadows</id><content type="html" xml:base="http://www.danieljbradshaw.co.uk/blog/Direct3D-Soft-Shadows/">&lt;iframe src=&quot;https://www.youtube.com/embed/HlVocgF9OM0?ecver=2&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; style=&quot;position:absolute;width:100%;height:100%;left:0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This is the most recent version of the spotlights system I’ve created in my second year. It has support for any number of lights (within reason! :D) and supports different projected textures for each light.&lt;/p&gt;

&lt;p&gt;It makes use of comparison filters to make PCF shadow filtering faster and create smoother, better looking shadows.&lt;/p&gt;

&lt;iframe src=&quot;https://www.youtube.com/embed/5ShIiPgCtjM?ecver=2&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; style=&quot;position:absolute;width:100%;height:100%;left:0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;The video above demos an earlier version which only supported one light.&lt;/p&gt;</content><author><name>Dan Bradshaw</name><email>danieljbradshaw@gmail.com</email></author><category term="University" /><category term="Second Year Projects" /><category term="DirectX 9" /><category term="C++" /><summary type="html">Dynamic soft shadows in DirectX 9</summary></entry><entry><title type="html">Games Engine Construction - Final Game Demo</title><link href="http://www.danieljbradshaw.co.uk/blog/Games-Engine-Construction-Final-Demo/" rel="alternate" type="text/html" title="Games Engine Construction - Final Game Demo" /><published>2012-03-05T00:00:00+00:00</published><updated>2012-03-05T00:00:00+00:00</updated><id>http://www.danieljbradshaw.co.uk/blog/Games-Engine-Construction-Final-Demo</id><content type="html" xml:base="http://www.danieljbradshaw.co.uk/blog/Games-Engine-Construction-Final-Demo/">&lt;iframe src=&quot;https://www.youtube.com/embed/VGZ3I_Ky8Ew?ecver=2&quot; width=&quot;480&quot; height=&quot;360&quot; frameborder=&quot;0&quot; style=&quot;position:absolute;width:100%;height:100%;left:0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;For my main project this year, I was tasked with creating a 2D engine from scratch. The final product is shown in the video above.&lt;/p&gt;

&lt;p&gt;Our lecturer provided an API called HAPI, which exposed a pointer to a frame buffer and an interface to mouse and keyboard input. It also provided a simple audio implementation, which I replace with code for FMOD I created in first year for my last big project. This provided a lot more flexibility and a much larger feature set to work with.&lt;/p&gt;

&lt;p&gt;HAPI didn’t provide and systems for drawing sprites, and only exposed a way to load images from files. Taking this image data, I created an instanced sprite rendering system to quickly blit the sprites to the screen buffer, including transparent blending and background scrolling.&lt;/p&gt;

&lt;p&gt;Taking inspiration from other engines, I implemented a simple component system to build entities from. This was driven by a entity manager which handled the creation and assembly of entities when requested by the gameplay code. It also handled memory allocation and pooling of entities.&lt;/p&gt;

&lt;p&gt;The entity manager was also tasked with updating the entities and components attached to those entities, automatically drawing or updating entities as needed.&lt;/p&gt;

&lt;p&gt;When working on the audio for this project, I had a lot more time to get stuck into FMOD and make use of all the awesome features it provides. I used dynamic music that progressed as the player progressed through the level, and event systems and RTPC systems.&lt;/p&gt;

&lt;p&gt;Overall I thoroughly enjoyed working on this project, and I think that shows in the video!&lt;/p&gt;</content><author><name>Dan Bradshaw</name><email>danieljbradshaw@gmail.com</email></author><category term="University" /><category term="Second Year Projects" /><category term="Custom Engine" /><category term="FMOD" /><category term="C++" /><summary type="html">Creating a game engine in C++</summary></entry><entry><title type="html">Year 1 ICA - Centipede Remake</title><link href="http://www.danieljbradshaw.co.uk/blog/Centipede-Remake/" rel="alternate" type="text/html" title="Year 1 ICA - Centipede Remake" /><published>2011-11-17T00:00:00+00:00</published><updated>2011-11-17T00:00:00+00:00</updated><id>http://www.danieljbradshaw.co.uk/blog/Centipede-Remake</id><content type="html" xml:base="http://www.danieljbradshaw.co.uk/blog/Centipede-Remake/">&lt;iframe src=&quot;https://www.youtube.com/embed/edvaX2dKiVQ?ecver=2&quot; width=&quot;480&quot; height=&quot;360&quot; frameborder=&quot;0&quot; style=&quot;position:absolute;width:100%;height:100%;left:0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;For our main project in this year, we had to work with a C++ framework provided by our lecture. This was my first experience using C++ and making use of multiple inheritance and polymorphism.
For the audio in the game, I worked with the FMOD sound system, making use of dynamic music and the event system it provides.&lt;/p&gt;</content><author><name>Dan Bradshaw</name><email>danieljbradshaw@gmail.com</email></author><category term="University" /><category term="First Year Projects" /><category term="C++" /><category term="FMOD" /><summary type="html">Remaking the arcade classic, Centipede in C++</summary></entry><entry><title type="html">UDK – Dr Who Level demo</title><link href="http://www.danieljbradshaw.co.uk/blog/UDK-Level-Demo/" rel="alternate" type="text/html" title="UDK – Dr Who Level demo" /><published>2011-11-07T00:00:00+00:00</published><updated>2011-11-07T00:00:00+00:00</updated><id>http://www.danieljbradshaw.co.uk/blog/UDK-Level-Demo</id><content type="html" xml:base="http://www.danieljbradshaw.co.uk/blog/UDK-Level-Demo/">&lt;iframe src=&quot;https://www.youtube.com/embed/5axH6yGzMQM?ecver=2&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; style=&quot;position:absolute;width:100%;height:100%;left:0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Using the Unreal Development Kit, we were asked to create a level based on the BBC TV Show Dr Who. Being one of my favorite TV shows, I jumped at the challenge and created the level shown in the video above. Since I didn’t have access to any custom made models, I made use entirely of those provided with the UDK. The Tardis model was provided by my friend.&lt;/p&gt;

&lt;p&gt;The story behind the level is that the Doctor has fallen out of the Time Vortex and crash landed on a nearby planet. Unfortunately for him, the planet is in orbit around a start that is about to go supernova. The player has 5 minutes to complete the level, fix the Tardis by collecting the power cells in the cave. They then have to make it back to the Tardis in time to survive the planet being destroyed.&lt;/p&gt;</content><author><name>Dan Bradshaw</name><email>danieljbradshaw@gmail.com</email></author><category term="University" /><category term="UDK" /><category term="First Year Projects" /><summary type="html">Building a simple level in UDK</summary></entry></feed>